<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

# Simplify keyframes

Let's take a moment to look at what we've built, and see if there might be ways to optimise things.

In this lesson we'll look at how we can make a more general-purpose set of keyframes that can be used in all manner of different ways, and eliminate some of the clutter from our CSS files.

To continue from the previous lesson, open the <a href="https://cssanimation.rocks/levelup/public/01/01.zip">sample code zip file</a> and look for folder `03-scroll-cue`.  A completed version of this lesson's code is in the folder `04-simplify-keyframes`.

## The power of the `animation` property

When we use animations in CSS, we build our animations as series of keyframes. We then apply these keyframes to our elements using the `animation` property. While both are important, it turns out there's a lot of power we can pack into that `animation` property. We can control timing, duration, and even direction to create all sorts of very different styles of animation, even using the same original keyframes.

## Generic keyframes

First let's take a look at our CSS. In the `header.css` file we have some sets of `keyframes` near the bottom. We'll focus on these three in particular.

    @keyframes fade-slide-down {
      0% {
        opacity: 0;
        transform: translateY(-4rem);
      }
      100% {
        opacity: 1;
        transform: none;
      }
    }

    @keyframes fade-slide-up {
      0% {
        opacity: 0;
        transform: translateY(4rem);
      }
      100% {
        opacity: 1;
        transform: none;
      }
    }

    @keyframes pop-in {
      0% {
        opacity: 0;
        transform: translateY(-4rem) scale(.8);
      }
      100% {
        opacity: 1;
        transform: none;
      }
    }

There's a similar pattern to each of these keyframes. Each finishes in the same way at the "100%" keyframe. The starting "0%" keyframe is different, but they all end the same way. We could start by building a "no-transform" animation that looks like this.

    @keyframes no-transform {
      100% {
        opacity: 1;
        transform: none;
      }
    }

It's worth noting, that you might see the "100%" here written as "to". When we have keyframes containing just a beginning and end state, we can refer to them as "from" and "to". It's up to you whether you want to use this approach. Either is fine.

You may also have noticed that just like in the "rotate-up" keyframes, we don't have a starting state. This is going to be useful when we apply the "no-transform" keyframes to our elements. 

## Applying the keyframes

In our `header.css` we begin with the `header::before` pseudo-element. We're using the "fade-slide-down" animation here. Instead, let's change it to use the "no-transform".

    header::before {
      animation: no-transform 2s .5s cubic-bezier(0, 0.5, 0, 1) forwards;
      background: linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,.8)),
                  url(../images/background.jpg) no-repeat bottom;
      background-size: cover;
      content: "";
      opacity: 0;
      transform: translateY(-4rem);
      position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

Just changing the `animation-name` isn't enough though - we need to set up the starting state for this animation in this code block. To do this we add `transform: translateY(-4rem);`.

Testing this in the browser, we should see no difference. The background animates by sliding down and fading in, just as before. 

Let's try the title content next. Further down our CSS file you'll find a block for the `.animate-pop-in` class. This uses the "pop-in" keyframes. Let's change this to also use "no-transform" instead.

    .animate-pop-in {
      animation: no-transform .6s cubic-bezier(0, 0.9, 0.3, 1.2) forwards;
      opacity: 0;
      transform: translateY(-4rem) scale(.8);
    }

Just like before we're also bringing in the `transform` that was in the keyframes, to set up the starting state. The "no-transform" keyframes only concern themselves with the end state. Again checking the browser, you'll see nothing has changed.

Next let's have the chevron at the bottom of the screen use the "no-transform" keyframes. In the `header-down-arrow img` block, change the animation name and add a `transform`.

    .header-down-arrow img {
      animation: no-transform 1s 1s ease-out forwards;
      opacity: 0;
      transform: translateY(4rem);
    }

And finally we remove the three keyframes we're no longer using, "fade-slide-down", "fade-slide-up" and "pop-in".

<p data-height="600" data-theme-id="light" data-slug-hash="OpbYzd" data-default-tab="result" data-user="donovanh" data-embed-version="2" data-pen-title="Landing page with simplified keyframes" class="codepen">See the Pen <a href="http://codepen.io/donovanh/pen/OpbYzd/">Landing page with simplified keyframes</a>.</p>

The result should again look no different, but we've removed quite a lot of code, as well as creating a versatile little keyframes we can now apply any time we want an animation to end in a "non-transformed" state. 

## Next: Waiting till the page is ready

In this lesson we took a look at our CSS and found a way to streamline it. We created a handy set of keyframes we can reuse as needed, as well as saw how powerful the `animation` property can be.

In our next lesson we add more polish to our hero header by waiting till our image assets are ready before showing the content.


